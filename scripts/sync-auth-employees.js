#!/usr/bin/env node
require('dotenv').config({ path: '.env.local' });
const { Client } = require('pg');

async function syncAuthEmployees() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth.user
    const usersResult = await client.query('SELECT id, email, created_at FROM auth."user"');
    console.log(`\nüìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ auth.user: ${usersResult.rowCount}`);
    usersResult.rows.forEach(u => {
      console.log(`  - ${u.email} (${u.id})`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º employees
    const employeesResult = await client.query('SELECT id, email, full_name, is_active FROM employees');
    console.log(`\nüë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ employees: ${employeesResult.rowCount}`);
    employeesResult.rows.forEach(e => {
      console.log(`  - ${e.email} (${e.full_name}) - ${e.is_active ? 'active' : 'inactive'}`);
    });

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ employee
    const orphanedUsers = await client.query(`
      SELECT u.id, u.email 
      FROM auth."user" u 
      LEFT JOIN employees e ON u.id = e.id 
      WHERE e.id IS NULL
    `);

    if (orphanedUsers.rowCount > 0) {
      console.log(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ employee: ${orphanedUsers.rowCount}`);
      orphanedUsers.rows.forEach(u => {
        console.log(`  - ${u.email} (${u.id})`);
      });

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å employee
      console.log('\nüîß –°–æ–∑–¥–∞—ë–º employee –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      for (const user of orphanedUsers.rows) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const directionResult = await client.query('SELECT id FROM directions LIMIT 1');
        const directionId = directionResult.rows[0]?.id;

        if (!directionId) {
          console.log('‚ùå –ù–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –ë–î. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.');
          continue;
        }

        await client.query(`
          INSERT INTO employees (id, email, full_name, position, direction_id, default_hourly_rate, is_active)
          VALUES ($1, $2, $3, $4, $5, $6, true)
          ON CONFLICT (id) DO NOTHING
        `, [
          user.id,
          user.email,
          user.email.split('@')[0], // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ email
          '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
          directionId,
          1000
        ]);

        console.log(`  ‚úì –°–æ–∑–¥–∞–Ω employee –¥–ª—è ${user.email}`);
      }
    } else {
      console.log('\n‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ employee –∑–∞–ø–∏—Å–∏');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

syncAuthEmployees();

