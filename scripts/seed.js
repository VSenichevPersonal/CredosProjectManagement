require('dotenv').config({ path: '.env.local' });

const { Client } = require('pg');
const bcrypt = require('bcryptjs');

async function seed() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL');

    // 1. –°–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –≤ auth.user
    console.log('\n‚Üí –°–æ–∑–¥–∞—ë–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ admin@mail.ru...');
    const hashedPassword = bcrypt.hashSync('admin@mail.ru', 10);
    
    const userResult = await client.query(
      `INSERT INTO auth."user" (email, encrypted_password) 
       VALUES ($1, $2) 
       ON CONFLICT (email) DO UPDATE SET encrypted_password = $2
       RETURNING id`,
      ['admin@mail.ru', hashedPassword]
    );
    const adminUserId = userResult.rows[0].id;
    console.log(`‚úì –°—É–ø–µ—Ä–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: ${adminUserId}`);

    // 2. –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log('\n‚Üí –°–æ–∑–¥–∞—ë–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
    const directions = [
      { name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', color: 'blue', budget: 10000000 },
      { name: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –ò–ë', color: 'cyan', budget: 8000000 },
      { name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', color: 'emerald', budget: 6000000 },
      { name: '–ê—É–¥–∏—Ç', color: 'orange', budget: 5000000 },
    ];

    const directionIds = [];
    for (const dir of directions) {
      const res = await client.query(
        `INSERT INTO directions (name, color, budget, budget_threshold, is_active)
         VALUES ($1, $2, $3, $4, true)
         ON CONFLICT DO NOTHING
         RETURNING id`,
        [dir.name, dir.color, dir.budget, dir.budget * 1.1]
      );
      if (res.rows[0]) {
        directionIds.push(res.rows[0].id);
        console.log(`‚úì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${dir.name}`);
      }
    }

    // 3. –°–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    console.log('\n‚Üí –°–æ–∑–¥–∞—ë–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
    const employees = [
      { email: 'admin@mail.ru', fullName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã', position: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', directionId: directionIds[0], rate: 5000 },
      { email: 'ivanov@credos.ru', fullName: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', position: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ë', directionId: directionIds[0], rate: 4500 },
      { email: 'petrov@credos.ru', fullName: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á', position: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ò–ë', directionId: directionIds[0], rate: 3000 },
      { email: 'sidorov@credos.ru', fullName: '–°–∏–¥–æ—Ä–æ–≤ –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á', position: '–ò–Ω–∂–µ–Ω–µ—Ä –ü–ò–ë', directionId: directionIds[1], rate: 3200 },
    ];

    const employeeIds = [];
    for (const emp of employees) {
      const res = await client.query(
        `INSERT INTO employees (email, full_name, position, direction_id, default_hourly_rate, is_active)
         VALUES ($1, $2, $3, $4, $5, true)
         ON CONFLICT (email) DO UPDATE 
         SET full_name = $2, position = $3, direction_id = $4, default_hourly_rate = $5
         RETURNING id`,
        [emp.email, emp.fullName, emp.position, emp.directionId, emp.rate]
      );
      employeeIds.push(res.rows[0].id);
      console.log(`‚úì –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${emp.fullName}`);
    }

    // 4. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
    console.log('\n‚Üí –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç—ã...');
    const projects = [
      { name: '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –°–≠–î', description: '–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞', directionId: directionIds[0], managerId: employeeIds[1], budget: 500000, status: 'active' },
      { name: '–ê—É–¥–∏—Ç –ò–ë –ë–∞–Ω–∫–∞', description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', directionId: directionIds[3], managerId: employeeIds[1], budget: 300000, status: 'active' },
      { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SIEM', description: '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', directionId: directionIds[1], managerId: employeeIds[3], budget: 400000, status: 'active' },
    ];

    for (const proj of projects) {
      await client.query(
        `INSERT INTO projects (name, description, direction_id, manager_id, total_budget, current_spent, status, start_date)
         VALUES ($1, $2, $3, $4, $5, 0, $6, CURRENT_DATE)
         ON CONFLICT DO NOTHING`,
        [proj.name, proj.description, proj.directionId, proj.managerId, proj.budget, proj.status]
      );
      console.log(`‚úì –ü—Ä–æ–µ–∫—Ç: ${proj.name}`);
    }

    // 5. –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å admin –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    console.log('\n‚Üí –°–æ–∑–¥–∞—ë–º —Ä–æ–ª–∏...');
    await client.query(
      `CREATE TABLE IF NOT EXISTS user_roles (
        id uuid primary key default gen_random_uuid(),
        employee_id uuid references employees(id) on delete cascade,
        role varchar(50) not null,
        granted_by uuid references employees(id),
        granted_at timestamptz default now(),
        is_active boolean default true,
        unique(employee_id, role)
      )`
    );

    await client.query(
      `INSERT INTO user_roles (employee_id, role, is_active)
       VALUES ($1, 'admin', true)
       ON CONFLICT (employee_id, role) DO NOTHING`,
      [employeeIds[0]]
    );
    console.log('‚úì –†–æ–ª—å admin –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É');

    console.log('\n‚úÖ Seed –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('   Email: admin@mail.ru');
    console.log('   –ü–∞—Ä–æ–ª—å: admin@mail.ru');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ seed:', error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

seed();

