#!/usr/bin/env node
require('dotenv').config({ path: '.env.local' });
const { Client } = require('pg');

async function checkAuthTables() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É auth
    const schemaCheck = await client.query(
      `SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'auth'`
    );

    if (schemaCheck.rowCount === 0) {
      console.log('‚ö†Ô∏è  –°—Ö–µ–º–∞ auth –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—ë–º...');
      await client.query('CREATE SCHEMA IF NOT EXISTS auth');
      console.log('‚úì –°—Ö–µ–º–∞ auth —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úì –°—Ö–µ–º–∞ auth —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É auth.user
    const userTableCheck = await client.query(
      `SELECT table_name FROM information_schema.tables WHERE table_schema = 'auth' AND table_name = 'user'`
    );

    if (userTableCheck.rowCount === 0) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ auth.user –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—ë–º...');
      await client.query(`
        CREATE TABLE auth."user" (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          email TEXT NOT NULL UNIQUE,
          encrypted_password TEXT NOT NULL,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
      `);
      console.log('‚úì –¢–∞–±–ª–∏—Ü–∞ auth.user —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úì –¢–∞–±–ª–∏—Ü–∞ auth.user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      const userCount = await client.query('SELECT COUNT(*) FROM auth."user"');
      console.log(`  ‚îî‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount.rows[0].count}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É auth.session
    const sessionTableCheck = await client.query(
      `SELECT table_name FROM information_schema.tables WHERE table_schema = 'auth' AND table_name = 'session'`
    );

    if (sessionTableCheck.rowCount === 0) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ auth.session –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—ë–º...');
      await client.query(`
        CREATE TABLE auth.session (
          id TEXT PRIMARY KEY,
          user_id UUID NOT NULL REFERENCES auth."user"(id) ON DELETE CASCADE,
          expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
      `);
      console.log('‚úì –¢–∞–±–ª–∏—Ü–∞ auth.session —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úì –¢–∞–±–ª–∏—Ü–∞ auth.session —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      const sessionCount = await client.query('SELECT COUNT(*) FROM auth.session');
      console.log(`  ‚îî‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessionCount.rows[0].count}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ employees —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–≤—è–∑–∞–Ω–∞ —Å auth.user
    const employeesCheck = await client.query(
      `SELECT COUNT(*) FROM employees WHERE id IN (SELECT id FROM auth."user" LIMIT 1)`
    );
    console.log(`\n‚úì –¢–∞–±–ª–∏—Ü–∞ employees —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    console.log(`  ‚îî‚îÄ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employeesCheck.rowCount}`);

    console.log('\nüéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

checkAuthTables();

