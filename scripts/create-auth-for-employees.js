#!/usr/bin/env node
require('dotenv').config({ path: '.env.local' });
const { Client } = require('pg');
const crypto = require('crypto');

/**
 * –°–æ–∑–¥–∞—ë—Ç auth.user –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function createAuthForEmployees() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL');

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ auth.user
    const orphanedEmployees = await client.query(`
      SELECT e.id, e.email, e.full_name, e.position 
      FROM employees e 
      LEFT JOIN auth."user" u ON e.id = u.id 
      WHERE u.id IS NULL AND e.is_active = true
    `);

    if (orphanedEmployees.rowCount === 0) {
      console.log('\n‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç auth.user –∑–∞–ø–∏—Å–∏');
      return;
    }

    console.log(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ auth.user: ${orphanedEmployees.rowCount}`);
    orphanedEmployees.rows.forEach(e => {
      console.log(`  - ${e.email} (${e.full_name})`);
    });

    console.log('\nüîß –°–æ–∑–¥–∞—ë–º auth.user –¥–ª—è —ç—Ç–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
    console.log('üìù –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö: "password123" (–Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å!)');

    // –•–µ—à–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º bcrypt —Ñ–æ—Ä–º–∞—Ç, –Ω–æ —É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    // –í production –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π bcrypt!
    const tempPassword = 'password123';
    const bcrypt = require('bcryptjs');
    const hashedPassword = await bcrypt.hash(tempPassword, 10);

    for (const employee of orphanedEmployees.rows) {
      try {
        await client.query(`
          INSERT INTO auth."user" (id, email, encrypted_password, created_at)
          VALUES ($1, $2, $3, NOW())
          ON CONFLICT (id) DO NOTHING
        `, [
          employee.id,
          employee.email,
          hashedPassword
        ]);

        console.log(`  ‚úì –°–æ–∑–¥–∞–Ω auth.user –¥–ª—è ${employee.email}`);
      } catch (err) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${employee.email}: ${err.message}`);
      }
    }

    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è:');
    console.log(`   Email: <–∏—Ö email>`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${tempPassword}`);
    console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

createAuthForEmployees();

