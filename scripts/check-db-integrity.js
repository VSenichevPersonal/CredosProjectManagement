require('dotenv').config({ path: '.env.local' });
const { Client } = require('pg');

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * - –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
 * - Foreign key constraints
 * - –ò–Ω–¥–µ–∫—Å—ã
 * - Orphaned records (–∑–∞–ø–∏—Å–∏ –±–µ–∑ parent)
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
 */

async function checkIntegrity() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL\n');

    const report = {
      tables: {},
      constraints: [],
      orphans: [],
      warnings: [],
      errors: []
    };

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...');
    const requiredTables = [
      'directions',
      'employees',
      'projects',
      'tasks',
      'time_entries',
      'user_roles',
      'revenue_manual',
      'salary_register'
    ];

    for (const table of requiredTables) {
      const result = await client.query(
        `SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = $1
        )`,
        [table]
      );
      
      if (result.rows[0].exists) {
        const countResult = await client.query(`SELECT COUNT(*) as count FROM ${table}`);
        report.tables[table] = {
          exists: true,
          count: parseInt(countResult.rows[0].count)
        };
        console.log(`  ‚úì ${table.padEnd(20)} - ${countResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
      } else {
        report.tables[table] = { exists: false, count: 0 };
        report.errors.push(`–¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        console.log(`  ‚úó ${table.padEnd(20)} - –ù–ï –ù–ê–ô–î–ï–ù–ê`);
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Foreign Keys
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ Foreign Key constraints...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned employees (–±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    const orphanedEmployees = await client.query(`
      SELECT e.id, e.full_name, e.direction_id
      FROM employees e
      LEFT JOIN directions d ON d.id = e.direction_id
      WHERE e.direction_id IS NOT NULL AND d.id IS NULL
    `);
    
    if (orphanedEmployees.rows.length > 0) {
      report.orphans.push({
        table: 'employees',
        count: orphanedEmployees.rows.length,
        records: orphanedEmployees.rows
      });
      console.log(`  ‚ö†Ô∏è  –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${orphanedEmployees.rows.length}`);
    } else {
      console.log('  ‚úì –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: –≤—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned projects
    const orphanedProjects = await client.query(`
      SELECT p.id, p.name, p.direction_id, p.manager_id
      FROM projects p
      LEFT JOIN directions d ON d.id = p.direction_id
      WHERE p.direction_id IS NOT NULL AND d.id IS NULL
    `);
    
    if (orphanedProjects.rows.length > 0) {
      report.orphans.push({
        table: 'projects',
        field: 'direction_id',
        count: orphanedProjects.rows.length
      });
      console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${orphanedProjects.rows.length}`);
    } else {
      console.log('  ‚úì –ü—Ä–æ–µ–∫—Ç—ã: –≤—Å–µ —Å–≤—è–∑–∏ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned tasks
    const orphanedTasks = await client.query(`
      SELECT t.id, t.name, t.project_id
      FROM tasks t
      LEFT JOIN projects p ON p.id = t.project_id
      WHERE t.project_id IS NOT NULL AND p.id IS NULL
    `);
    
    if (orphanedTasks.rows.length > 0) {
      report.orphans.push({
        table: 'tasks',
        count: orphanedTasks.rows.length
      });
      console.log(`  ‚ö†Ô∏è  –ó–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞: ${orphanedTasks.rows.length}`);
    } else {
      console.log('  ‚úì –ó–∞–¥–∞—á–∏: –≤—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned time_entries
    const orphanedTimeEntries = await client.query(`
      SELECT te.id, te.employee_id, te.project_id
      FROM time_entries te
      LEFT JOIN employees e ON e.id = te.employee_id
      LEFT JOIN projects p ON p.id = te.project_id
      WHERE (te.employee_id IS NOT NULL AND e.id IS NULL)
         OR (te.project_id IS NOT NULL AND p.id IS NULL)
    `);
    
    if (orphanedTimeEntries.rows.length > 0) {
      report.orphans.push({
        table: 'time_entries',
        count: orphanedTimeEntries.rows.length
      });
      console.log(`  ‚ö†Ô∏è  –ó–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏: ${orphanedTimeEntries.rows.length}`);
    } else {
      console.log('  ‚úì –ó–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏: –≤—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    const activeEmployees = await client.query('SELECT COUNT(*) FROM employees WHERE is_active = true');
    const activeCount = parseInt(activeEmployees.rows[0].count);
    if (activeCount === 0) {
      report.warnings.push('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      console.log('  ‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
    } else {
      console.log(`  ‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${activeCount}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const activeDirections = await client.query('SELECT COUNT(*) FROM directions WHERE is_active = true');
    const activeDirCount = parseInt(activeDirections.rows[0].count);
    if (activeDirCount === 0) {
      report.warnings.push('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
      console.log('  ‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    } else {
      console.log(`  ‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${activeDirCount}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ active
    const activeProjects = await client.query("SELECT COUNT(*) FROM projects WHERE status = 'active'");
    const activeProjCount = parseInt(activeProjects.rows[0].count);
    console.log(`  ‚ÑπÔ∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: ${activeProjCount}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const recentTimeEntries = await client.query(`
      SELECT COUNT(*) FROM time_entries 
      WHERE date >= CURRENT_DATE - INTERVAL '30 days'
    `);
    const recentCount = parseInt(recentTimeEntries.rows[0].count);
    if (recentCount === 0) {
      report.warnings.push('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π');
      console.log('  ‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π');
    } else {
      console.log(`  ‚úì –ó–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: ${recentCount}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    const indexes = await client.query(`
      SELECT tablename, indexname 
      FROM pg_indexes 
      WHERE schemaname = 'public'
      ORDER BY tablename, indexname
    `);
    
    const indexCount = indexes.rows.length;
    console.log(`  ‚ÑπÔ∏è  –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexCount}`);

    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢');
    console.log('='.repeat(60));
    
    const totalRecords = Object.values(report.tables)
      .reduce((sum, table) => sum + table.count, 0);
    
    console.log(`\n‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${totalRecords}`);
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${requiredTables.length}`);
    console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${indexCount}`);
    
    if (report.errors.length > 0) {
      console.log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${report.errors.length}`);
      report.errors.forEach(err => console.log(`   - ${err}`));
    }
    
    if (report.orphans.length > 0) {
      console.log(`\n‚ö†Ô∏è  Orphaned –∑–∞–ø–∏—Å–µ–π: ${report.orphans.length} —Ç–∏–ø–æ–≤`);
      report.orphans.forEach(orphan => {
        console.log(`   - ${orphan.table}: ${orphan.count} –∑–∞–ø–∏—Å–µ–π`);
      });
    }
    
    if (report.warnings.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${report.warnings.length}`);
      report.warnings.forEach(warn => console.log(`   - ${warn}`));
    }
    
    if (report.errors.length === 0 && report.orphans.length === 0) {
      console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!');
    } else if (report.errors.length === 0) {
      console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–µ—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è)');
    } else {
      console.log('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ.');
    }

    console.log('\n' + '='.repeat(60) + '\n');

    return report;

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkIntegrity()
  .then(() => {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });

