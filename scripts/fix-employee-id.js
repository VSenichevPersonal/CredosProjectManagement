#!/usr/bin/env node
require('dotenv').config({ path: '.env.local' });
const { Client } = require('pg');

async function fixEmployeeId() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL');

    // –ù–∞–π—Ç–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ ID
    const mismatchResult = await client.query(`
      SELECT 
        u.id as auth_id,
        u.email,
        e.id as employee_id
      FROM auth."user" u
      INNER JOIN employees e ON u.email = e.email
      WHERE u.id != e.id
    `);

    if (mismatchResult.rowCount === 0) {
      console.log('‚úÖ –í—Å–µ ID —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
      return;
    }

    console.log(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${mismatchResult.rowCount}`);
    
    for (const row of mismatchResult.rows) {
      console.log(`\nüìß ${row.email}:`);
      console.log(`  auth.user ID:  ${row.auth_id}`);
      console.log(`  employee ID:   ${row.employee_id}`);
      console.log(`  üîß –û–±–Ω–æ–≤–ª—è–µ–º employee.id...`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π ID
      const oldEmployeeId = row.employee_id;
      const newEmployeeId = row.auth_id;

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      await client.query('BEGIN');

      try {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º FK constraints
        await client.query('SET CONSTRAINTS ALL DEFERRED');
        console.log(`  ‚öôÔ∏è  FK constraints –æ—Ç–ª–æ–∂–µ–Ω—ã`);

        // 1. –û–±–Ω–æ–≤–ª—è–µ–º user_roles
        await client.query(
          'UPDATE user_roles SET employee_id = $1 WHERE employee_id = $2',
          [newEmployeeId, oldEmployeeId]
        );
        console.log(`  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ user_roles`);

        // 2. –û–±–Ω–æ–≤–ª—è–µ–º projects (manager_id)
        await client.query(
          'UPDATE projects SET manager_id = $1 WHERE manager_id = $2',
          [newEmployeeId, oldEmployeeId]
        );
        console.log(`  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ projects.manager_id`);

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º tasks (assignee_id)
        await client.query(
          'UPDATE tasks SET assignee_id = $1 WHERE assignee_id = $2',
          [newEmployeeId, oldEmployeeId]
        );
        console.log(`  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ tasks.assignee_id`);

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º time_entries (employee_id)
        await client.query(
          'UPDATE time_entries SET employee_id = $1 WHERE employee_id = $2',
          [newEmployeeId, oldEmployeeId]
        );
        console.log(`  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ time_entries.employee_id`);

        // 5. –û–±–Ω–æ–≤–ª—è–µ–º salary_register (employee_id)
        await client.query(
          'UPDATE salary_register SET employee_id = $1 WHERE employee_id = $2',
          [newEmployeeId, oldEmployeeId]
        );
        console.log(`  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ salary_register.employee_id`);

        // 6. –ù–∞–∫–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º employees.id
        await client.query(
          'UPDATE employees SET id = $1 WHERE id = $2',
          [newEmployeeId, oldEmployeeId]
        );
        console.log(`  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ employees.id`);

        await client.query('COMMIT');
        console.log(`  ‚úÖ ID —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!`);

      } catch (err) {
        await client.query('ROLLBACK');
        console.error(`  ‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
        throw err;
      }
    }

    console.log('\nüéâ –í—Å–µ ID —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

fixEmployeeId();

