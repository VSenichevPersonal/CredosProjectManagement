#!/usr/bin/env node
require('dotenv').config({ path: '.env.local' });
const { Client } = require('pg');

async function checkAndFixRoles() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ employees
    const employeesResult = await client.query(`
      SELECT id, email, full_name, position, is_active 
      FROM employees 
      ORDER BY created_at
    `);

    console.log(`\nüë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –±–∞–∑–µ: ${employeesResult.rowCount}`);
    
    for (const emp of employeesResult.rows) {
      console.log(`\nüìß ${emp.email} (${emp.full_name})`);
      console.log(`   ID: ${emp.id}`);
      console.log(`   –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${emp.position}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${emp.is_active ? '–¥–∞' : '–Ω–µ—Ç'}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
      const rolesResult = await client.query(
        'SELECT role, is_active FROM user_roles WHERE employee_id = $1',
        [emp.id]
      );

      if (rolesResult.rowCount === 0) {
        console.log(`   ‚ö†Ô∏è  –†–æ–ª–µ–π –ù–ï–¢! –î–æ–±–∞–≤–ª—è–µ–º...`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ email –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        let role = 'employee'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (emp.email.includes('admin') || emp.position?.toLowerCase().includes('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')) {
          role = 'admin';
        } else if (emp.position?.toLowerCase().includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || emp.position?.toLowerCase().includes('—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª')) {
          role = 'manager';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å
        await client.query(
          `INSERT INTO user_roles (employee_id, role, is_active)
           VALUES ($1, $2, true)
           ON CONFLICT (employee_id, role) DO NOTHING`,
          [emp.id, role]
        );

        console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å: ${role}`);
      } else {
        console.log(`   ‚úì –†–æ–ª–∏:`);
        rolesResult.rows.forEach(r => {
          console.log(`      - ${r.role} (${r.is_active ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'})`);
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å auth.user
      const authCheck = await client.query(
        'SELECT id FROM auth."user" WHERE id = $1',
        [emp.id]
      );

      if (authCheck.rowCount > 0) {
        console.log(`   ‚úì –°–≤—è–∑–∞–Ω —Å auth.user`);
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–ï —Å–≤—è–∑–∞–Ω —Å auth.user (–ª–æ–≥–∏–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω)`);
      }
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

checkAndFixRoles();

