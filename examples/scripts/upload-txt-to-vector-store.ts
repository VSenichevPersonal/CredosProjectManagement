/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ .txt —Ñ–∞–π–ª–æ–≤ –≤ Vector Store
 * .md –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º .txt
 */

import { config } from 'dotenv'
import OpenAI from 'openai'
import fs from 'fs'
import path from 'path'

config({ path: '.env.local' })

async function main() {
  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
  
  console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ .txt —Ñ–∞–π–ª–æ–≤ –≤ Vector Store...')
  console.log('')
  
  // –°–æ–∑–¥–∞—ë–º –ù–û–í–´–ô Vector Store –¥–ª—è .txt
  const vectorStore = await openai.vectorStores.create({
    name: "–ü–î–Ω Templates (TXT format)"
  })
  
  console.log(`‚úÖ Vector Store —Å–æ–∑–¥–∞–Ω: ${vectorStore.id}`)
  console.log('')
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º .txt —Ñ–∞–π–ª—ã
  const txtDir = 'training-data/pdn-documents/txt-versions'
  const files = fs.readdirSync(txtDir)
    .filter(f => f.endsWith('.txt'))
    .map(f => path.join(txtDir, f))
  
  console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞—é ${files.length} .txt —Ñ–∞–π–ª–æ–≤...`)
  console.log('')
  
  const fileIds: string[] = []
  
  for (const filePath of files) {
    const filename = path.basename(filePath)
    process.stdout.write(`‚¨ÜÔ∏è  ${filename.substring(0, 60)}...`)
    
    try {
      const file = await openai.files.create({
        file: fs.createReadStream(filePath),
        purpose: 'assistants'
      })
      
      fileIds.push(file.id)
      console.log(' ‚úÖ')
    } catch (error: any) {
      console.log(` ‚ùå ${error.message}`)
    }
  }
  
  console.log('')
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${fileIds.length}/${files.length} —Ñ–∞–π–ª–æ–≤`)
  console.log('')
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ Vector Store batch'–µ–º
  console.log('üì¶ –î–æ–±–∞–≤–ª—è—é –≤ Vector Store (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è)...')
  
  const batch = await openai.vectorStores.fileBatches.createAndPoll(vectorStore.id, {
    file_ids: fileIds
  })
  
  console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${batch.status}`)
  console.log(`   Completed: ${batch.file_counts.completed}/${batch.file_counts.total}`)
  console.log(`   Failed: ${batch.file_counts.failed}`)
  console.log('')
  
  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ Assistant
  const ASSISTANT_ID = process.env.OPENAI_DOCUMENT_ASSISTANT_ID
  
  console.log('üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞—é –∫ Assistant...')
  
  await openai.beta.assistants.update(ASSISTANT_ID!, {
    tool_resources: {
      file_search: {
        vector_store_ids: [vectorStore.id]
      }
    }
  })
  
  console.log('‚úÖ –ì–æ—Ç–æ–≤–æ!')
  console.log('')
  console.log('üìù –û–±–Ω–æ–≤–∏—Ç–µ .env.local:')
  console.log(`OPENAI_DOCUMENT_VECTOR_STORE_ID=${vectorStore.id}`)
  console.log('')
  
  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env
  const envPath = '.env.local'
  let envContent = fs.readFileSync(envPath, 'utf-8')
  
  if (envContent.includes('OPENAI_DOCUMENT_VECTOR_STORE_ID')) {
    envContent = envContent.replace(
      /OPENAI_DOCUMENT_VECTOR_STORE_ID=.*/,
      `OPENAI_DOCUMENT_VECTOR_STORE_ID=${vectorStore.id}`
    )
  } else {
    envContent += `\nOPENAI_DOCUMENT_VECTOR_STORE_ID=${vectorStore.id}\n`
  }
  
  fs.writeFileSync(envPath, envContent)
  console.log('‚úÖ .env.local –æ–±–Ω–æ–≤–ª—ë–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
  console.log('')
  console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:')
  console.log(`   Assistant: ${ASSISTANT_ID}`)
  console.log(`   Vector Store: ${vectorStore.id}`)
  console.log(`   –§–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ: ${batch.file_counts.completed}`)
  console.log('')
  console.log('üéØ –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:')
  console.log('   npm run dev (—É–∂–µ –∑–∞–ø—É—â–µ–Ω)')
  console.log('   ‚Üí http://localhost:3001/documents/wizard/new')
}

main()

