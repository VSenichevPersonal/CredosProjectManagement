/**
 * –°–æ–∑–¥–∞–Ω–∏–µ Vector Store –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * SDK 6.3.0 - vectorStores –≤ client.vectorStores (–Ω–µ –≤ beta!)
 * 
 * Usage:
 *   npx tsx scripts/create-vector-store.ts
 */

import { config } from 'dotenv'
import OpenAI from 'openai'
import fs from 'fs'
import path from 'path'

config({ path: '.env.local' })

const ASSISTANT_ID = process.env.OPENAI_DOCUMENT_ASSISTANT_ID || ''

async function main() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Vector Store –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...')
  console.log('')
  
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY not found')
    process.exit(1)
  }
  
  if (!ASSISTANT_ID) {
    console.error('‚ùå OPENAI_DOCUMENT_ASSISTANT_ID not found')
    process.exit(1)
  }
  
  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
  
  console.log(`üìù Assistant ID: ${ASSISTANT_ID}`)
  console.log('')
  
  // 1. –°–æ–∑–¥–∞—Ç—å Vector Store (–ù–ï beta!)
  console.log('üì¶ –°–æ–∑–¥–∞—é Vector Store...')
  
  const vectorStore = await openai.vectorStores.create({
    name: "–ü–î–Ω Document Templates"
  })
  
  console.log(`‚úÖ Vector Store created: ${vectorStore.id}`)
  console.log('')
  
  // 2. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã
  const docsDir = path.join(process.cwd(), 'training-data/pdn-documents')
  const files = fs.readdirSync(docsDir)
    .filter(f => f.endsWith('.md'))
    .map(f => path.join(docsDir, f))
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`)
  console.log('')
  
  const fileIds: string[] = []
  
  for (const filePath of files) {
    const filename = path.basename(filePath)
    console.log(`‚¨ÜÔ∏è  ${filename}`)
    
    try {
      const file = await openai.files.create({
        file: fs.createReadStream(filePath),
        purpose: 'assistants'
      })
      
      fileIds.push(file.id)
    } catch (error: any) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
    }
  }
  
  console.log('')
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${fileIds.length}/${files.length} —Ñ–∞–π–ª–æ–≤`)
  console.log('')
  
  // 3. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –≤ Vector Store batch'–µ–º
  console.log('üìé –î–æ–±–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –≤ Vector Store...')
  
  const batch = await openai.vectorStores.fileBatches.createAndPoll(vectorStore.id, {
    file_ids: fileIds
  })
  
  console.log(`‚úÖ Batch —Å–æ–∑–¥–∞–Ω: ${batch.id}`)
  console.log(`   –°—Ç–∞—Ç—É—Å: ${batch.status}`)
  console.log(`   –§–∞–π–ª–æ–≤: ${batch.file_counts.completed}/${batch.file_counts.total}`)
  console.log('')
  
  // 4. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å Vector Store –∫ Assistant
  console.log('üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞—é Vector Store –∫ Assistant...')
  
  const assistant = await openai.beta.assistants.update(ASSISTANT_ID, {
    tool_resources: {
      file_search: {
        vector_store_ids: [vectorStore.id]
      }
    }
  })
  
  console.log('‚úÖ Vector Store –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Assistant!')
  console.log('')
  
  // 5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –≤ .env
  console.log('üìù –î–æ–±–∞–≤—å—Ç–µ –≤ .env.local:')
  console.log(`OPENAI_DOCUMENT_VECTOR_STORE_ID=${vectorStore.id}`)
  console.log('')
  
  // –û–±–Ω–æ–≤–ª—è–µ–º .env.local –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  const envPath = path.join(process.cwd(), '.env.local')
  let envContent = fs.readFileSync(envPath, 'utf-8')
  
  if (!envContent.includes('OPENAI_DOCUMENT_VECTOR_STORE_ID')) {
    envContent += `\nOPENAI_DOCUMENT_VECTOR_STORE_ID=${vectorStore.id}\n`
    fs.writeFileSync(envPath, envContent)
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ .env.local')
  }
  
  console.log('')
  console.log('‚úÖ Setup –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!')
  console.log('')
  console.log('üìä –ò—Ç–æ–≥–æ:')
  console.log(`   Assistant: ${ASSISTANT_ID}`)
  console.log(`   Vector Store: ${vectorStore.id}`)
  console.log(`   –§–∞–π–ª–æ–≤: ${batch.file_counts.completed}`)
  console.log('')
  console.log('üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:')
  console.log('   npm run dev')
  console.log('   ‚Üí http://localhost:3000/documents/wizard/new')
  console.log('')
}

main()

