/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ placeholder'—ã –≤ —Ç–∏–ø–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
 * 
 * Usage:
 *   npx tsx scripts/anonymize-training-data.ts
 */

import fs from 'fs'
import path from 'path'

// –ö–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω: —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí placeholder'—ã
const replacements = [
  // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  { pattern: /–û–û–û ¬´–ö–†–ï–î–û–°¬ª/g, replacement: '{{org-name}}' },
  { pattern: /–û–û–û ¬´–ö–†–ï–î–û-–°¬ª/g, replacement: '{{org-name}}' },
  { pattern: /–û–û–û "–ö–†–ï–î–û–°"/g, replacement: '{{org-name}}' },
  { pattern: /–û–û–û "–ö–†–ï–î–û-–°"/g, replacement: '{{org-name}}' },
  { pattern: /–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–ö–†–ï–î–û–°¬ª/g, replacement: '{{org-full-name}}' },
  
  // –§–ò–û
  { pattern: /–°–µ–Ω–∏—á–µ–≤ –ù\.–ì\./g, replacement: '{{director-name}}' },
  { pattern: /–ù\.–ì\. –°–µ–Ω–∏—á–µ–≤/g, replacement: '{{director-name}}' },
  { pattern: /–°–µ–Ω–∏—á–µ–≤ –ù–∏–∫–æ–ª–∞–π –ì–µ–æ—Ä–≥–∏–µ–≤–∏—á/g, replacement: '{{director-full-name}}' },
  { pattern: /–ù–∏–∫–æ–ª–∞–π –ì–µ–æ—Ä–≥–∏–µ–≤–∏—á –°–µ–Ω–∏—á–µ–≤/g, replacement: '{{director-full-name}}' },
  
  // –ì–æ—Ä–æ–¥–∞
  { pattern: /–≥\. –¢—É–ª–∞/g, replacement: '{{org-city}}' },
  { pattern: /–≥–æ—Ä–æ–¥ –¢—É–ª–∞/g, replacement: '{{org-city}}' },
  
  // –ê–¥—Ä–µ—Å–∞
  { pattern: /–≥\. –¢—É–ª–∞, —É–ª\. [–ê-–Ø–∞-—è\s]+, –¥\. \d+[–ê-–Ø–∞-—è]?, [^,\n]+/g, replacement: '{{org-address}}' },
  { pattern: /300012,\s*–≥\.\s*–¢—É–ª–∞[^,\n]*/g, replacement: '{{org-postal-address}}' },
  
  // –°–∞–π—Ç—ã
  { pattern: /https?:\/\/www\.credos\.ru\/?/g, replacement: '{{org-website}}' },
  { pattern: /https?:\/\/cert\.credos\.ru\/?/g, replacement: '{{org-cert-website}}' },
  { pattern: /https?:\/\/cyberosnova\.ru\/?/g, replacement: '{{org-cyber-website}}' },
  
  // –ò–ù–ù, –û–ì–†–ù, –ö–ü–ü
  { pattern: /–ò–ù–ù\s+\d{10,12}/g, replacement: '–ò–ù–ù {{org-inn}}' },
  { pattern: /–û–ì–†–ù\s+\d{13,15}/g, replacement: '–û–ì–†–ù {{org-ogrn}}' },
  { pattern: /–ö–ü–ü\s+\d{9}/g, replacement: '–ö–ü–ü {{org-kpp}}' },
  
  // –¢–µ–ª–µ—Ñ–æ–Ω—ã
  { pattern: /\+7\s*\(\d{3}\)\s*\d{3}-\d{2}-\d{2}/g, replacement: '{{org-phone}}' },
  { pattern: /8\s*\(\d{3}\)\s*\d{3}-\d{2}-\d{2}/g, replacement: '{{org-phone}}' },
  
  // Email
  { pattern: /[a-zA-Z0-9._%+-]+@credos\.ru/g, replacement: '{{org-email}}' },
  { pattern: /[a-zA-Z0-9._%+-]+@cyberosnova\.ru/g, replacement: '{{org-email}}' },
  
  // –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  { pattern: /–ê–û ¬´[^¬ª]+¬ª/g, replacement: '{{contractor-name}}' },
  { pattern: /–ü–ê–û ¬´[^¬ª]+¬ª/g, replacement: '{{contractor-name}}' },
  
  // –î–∞—Ç—ã –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö (–æ—Å—Ç–∞–≤–ª—è–µ–º placeholder)
  { pattern: /¬´__¬ª __________20__–≥\./g, replacement: '¬´__¬ª __________ {{current-year}} –≥.' },
]

async function anonymizeFile(filePath: string): Promise<void> {
  try {
    let content = fs.readFileSync(filePath, 'utf-8')
    let modified = false
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
    for (const { pattern, replacement } of replacements) {
      const before = content
      content = content.replace(pattern, replacement)
      if (before !== content) {
        modified = true
      }
    }
    
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf-8')
      console.log(`‚úÖ Anonymized: ${path.basename(filePath)}`)
      return
    }
    
    console.log(`‚è≠Ô∏è  Skipped (no changes): ${path.basename(filePath)}`)
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error)
  }
}

async function main() {
  console.log('üöÄ Anonymizing training data...')
  console.log('')
  
  const docsDir = path.join(process.cwd(), 'training-data/pdn-documents')
  
  if (!fs.existsSync(docsDir)) {
    console.error('‚ùå Directory not found:', docsDir)
    process.exit(1)
  }
  
  const files = fs.readdirSync(docsDir)
    .filter(f => f.endsWith('.md'))
    .map(f => path.join(docsDir, f))
  
  console.log(`üìÅ Found ${files.length} documents`)
  console.log('')
  
  for (const file of files) {
    await anonymizeFile(file)
  }
  
  console.log('')
  console.log(`‚úÖ Anonymization complete! Processed ${files.length} files`)
  console.log('')
  console.log('üìù Placeholders –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ:')
  console.log('   {{org-name}} - –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
  console.log('   {{director-name}} - –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
  console.log('   {{org-city}} - –≥–æ—Ä–æ–¥')
  console.log('   {{org-address}} - –∞–¥—Ä–µ—Å')
  console.log('   {{org-inn}} - –ò–ù–ù')
  console.log('   {{org-website}} - —Å–∞–π—Ç')
  console.log('   ... –∏ –¥—Ä—É–≥–∏–µ')
}

main()

