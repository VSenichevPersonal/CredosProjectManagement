/**
 * @intent: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
 * @llm-note: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç, —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ä–æ–∫–æ–≤
 */

import { differenceInDays, format, isPast, isFuture } from "date-fns"
import { ru } from "date-fns/locale"

export interface MeasureDeadlineInfo {
  isOverdue: boolean
  isCritical: boolean // < 3 –¥–Ω–µ–π
  isWarning: boolean // < 14 –¥–Ω–µ–π
  daysUntilDue: number
  message: string
  color: "default" | "warning" | "critical" | "success"
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö –º–µ—Ä—ã
 */
export function calculateDeadlineInfo(
  targetDate: Date | string | null | undefined,
  status: string
): MeasureDeadlineInfo | null {
  if (!targetDate) return null

  const target = typeof targetDate === "string" ? new Date(targetDate) : targetDate
  const now = new Date()
  const daysUntilDue = differenceInDays(target, now)

  // –ï—Å–ª–∏ –º–µ—Ä–∞ —É–∂–µ –≤–Ω–µ–¥—Ä–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ - –Ω–µ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π
  const isCompleted = ["implemented", "verified"].includes(status)

  const isOverdue = !isCompleted && isPast(target)
  const isCritical = !isCompleted && daysUntilDue <= 3 && daysUntilDue >= 0
  const isWarning = !isCompleted && daysUntilDue <= 14 && daysUntilDue > 3

  let message = ""
  let color: "default" | "warning" | "critical" | "success" = "default"

  if (isOverdue) {
    message = `–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.abs(daysUntilDue)} –¥–Ω.`
    color = "critical"
  } else if (isCritical) {
    message = `–ö—Ä–∏—Ç–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å ${daysUntilDue} –¥–Ω.`
    color = "critical"
  } else if (isWarning) {
    message = `–î–æ —Å—Ä–æ–∫–∞ ${daysUntilDue} –¥–Ω.`
    color = "warning"
  } else if (isCompleted) {
    message = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
    color = "success"
  } else {
    message = `–î–æ —Å—Ä–æ–∫–∞ ${daysUntilDue} –¥–Ω.`
    color = "default"
  }

  return {
    isOverdue,
    isCritical,
    isWarning,
    daysUntilDue,
    message,
    color,
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatMeasureDate(date: Date | string | null | undefined): string {
  if (!date) return "‚Äî"

  const d = typeof date === "string" ? new Date(date) : date
  return format(d, "dd.MM.yyyy", { locale: ru })
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
 */
export function formatMeasureDateWithDay(date: Date | string | null | undefined): string {
  if (!date) return "‚Äî"

  const d = typeof date === "string" ? new Date(date) : date
  return format(d, "dd MMM yyyy (EEE)", { locale: ru })
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ü–≤–µ—Ç –¥–ª—è –º–µ—Ä—ã
 */
export function getMeasureStatusColor(status: string): string {
  const colors: Record<string, string> = {
    planned: "bg-gray-100 text-gray-800 border-gray-300",
    in_progress: "bg-blue-100 text-blue-800 border-blue-300",
    implemented: "bg-green-100 text-green-800 border-green-300",
    verified: "bg-emerald-100 text-emerald-800 border-emerald-300",
    failed: "bg-red-100 text-red-800 border-red-300",
    overdue: "bg-orange-100 text-orange-800 border-orange-300",
  }

  return colors[status] || colors.planned
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
 */
export function getMeasureStatusLabel(status: string): string {
  const labels: Record<string, string> = {
    planned: "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞",
    in_progress: "–í —Ä–∞–±–æ—Ç–µ",
    implemented: "–í–Ω–µ–¥—Ä–µ–Ω–∞",
    verified: "–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞",
    failed: "–ù–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
    overdue: "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞",
  }

  return labels[status] || status
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ä—ã
 */
export function needsReview(
  nextReviewDate: Date | string | null | undefined,
  status: string
): boolean {
  if (!nextReviewDate) return false
  if (!["implemented", "verified"].includes(status)) return false

  const reviewDate = typeof nextReviewDate === "string" ? new Date(nextReviewDate) : nextReviewDate
  const now = new Date()

  // –ù—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –¥–æ –Ω–µ—ë –æ—Å—Ç–∞–ª–æ—Å—å 14 –¥–Ω–µ–π –∏–ª–∏ –º–µ–Ω—å—à–µ
  return differenceInDays(reviewDate, now) <= 14
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –º–µ—Ä—ã
 */
export function isExpiring(
  validUntil: Date | string | null | undefined,
  status: string
): boolean {
  if (!validUntil) return false
  if (!["implemented", "verified"].includes(status)) return false

  const expiryDate = typeof validUntil === "string" ? new Date(validUntil) : validUntil
  const now = new Date()

  // –ò—Å—Ç–µ–∫–∞–µ—Ç –µ—Å–ª–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 30 –¥–Ω–µ–π –∏–ª–∏ –º–µ–Ω—å—à–µ
  return differenceInDays(expiryDate, now) <= 30 && isFuture(expiryDate)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export function getFrequencyLabel(frequency: string): string {
  const labels: Record<string, string> = {
    continuous: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ",
    daily: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
    weekly: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
    monthly: "–ï–∂–µ–º–µ—Å—è—á–Ω–æ",
    quarterly: "–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ",
    annually: "–ï–∂–µ–≥–æ–¥–Ω–æ",
    on_demand: "–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é",
  }

  return labels[frequency] || frequency
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å—Ä–æ–∫
 */
export function calculateOnTimePercentage(
  totalMeasures: number,
  onTimeMeasures: number
): number {
  if (totalMeasures === 0) return 0
  return Math.round((onTimeMeasures / totalMeasures) * 100)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –º–µ—Ä—ã
 */
export function getMeasureTypeIcon(measureType: string): string {
  const icons: Record<string, string> = {
    preventive: "üõ°Ô∏è",
    detective: "üîç",
    corrective: "üîß",
    compensating: "‚ÜîÔ∏è",
  }

  return icons[measureType] || "üìã"
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å label –¥–ª—è —Ç–∏–ø–∞ –º–µ—Ä—ã
 */
export function getMeasureTypeLabel(measureType: string): string {
  const labels: Record<string, string> = {
    preventive: "–ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–∞—è",
    detective: "–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞—è",
    corrective: "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∞—è",
    compensating: "–ö–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–∞—è",
  }

  return labels[measureType] || measureType
}

